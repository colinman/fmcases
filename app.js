// Generated by IcedCoffeeScript 1.8.0-d
(function() {
  var app, db, express, iced, ignoreRegex, mongoose, path, port, schema, stylus, truncate, _, __iced_k, __iced_k_noop;

  iced = require('iced-runtime');
  __iced_k = __iced_k_noop = function() {};

  express = require('express');

  path = require('path');

  app = module.exports.app = exports.app = express();

  mongoose = require('mongoose');

  schema = require('./lib/schema.js');

  stylus = require('stylus');

  _ = require('underscore');

  mongoose.connect('mongodb://localhost/fmcases');

  db = mongoose.connection;

  db.on('error', console.error.bind(console, 'connection error:'));

  app.use(stylus.middleware({
    src: __dirname + '/app/styles',
    dest: __dirname + '/app/styles',
    compile: function(str, path) {
      return stylus(str).set('filename', path).set('compress', true).set('include css', true);
    }
  }));

  app.get("*", function(req, res, next) {
    console.log("GET " + req.originalUrl);
    return next();
  });

  app.get("/item/:id", function(req, res) {
    var err, item, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/Users/colinman/fmcases/app.coffee"
        });
        schema.items.findOne({
          id: req.param('id')
        }, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return item = arguments[1];
            };
          })(),
          lineno: 25
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        if (err) {
          return console.log(err);
        }
        return res.send(item);
      };
    })(this));
  });

  ignoreRegex = "[^A-z]";

  String.prototype.insert = function(index, str) {
    return this.substring(0, index) + str + this.substring(index, this.length);
  };

  truncate = function(content, word) {
    var count, fragment, leading, output, regex, results, trailing;
    count = 0;
    leading = 15;
    trailing = 10 + word.length;
    content = content.replace(/<(?:.|\n)*?>/gmi, ' ');
    regex = new RegExp("" + ignoreRegex + word, 'gi');
    output = "";
    results = regex.exec(content);
    while (results) {
      if (count > 5) {
        break;
      }
      count++;
      fragment = content.substring(results.index - leading, results.index + trailing);
      fragment = fragment.insert(leading + word.length + 1, '</b>');
      fragment = fragment.insert(leading + 1, '<b>');
      output += "..." + fragment;
      results = regex.exec(content);
    }
    return [output.replace(/\s+/g, ' '), count];
  };

  app.get("/search", function(req, res) {
    return res.send([]);
  });

  app.get("/search/:word", function(req, res) {
    var err, regex, results, word, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    word = req.param('word');
    regex = new RegExp("" + ignoreRegex + word, 'gi');
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/Users/colinman/fmcases/app.coffee"
        });
        schema.items.find({
          'content': {
            $regex: regex
          }
        }, {
          id: 1,
          title: 1,
          content: 1
        }).lean().exec(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return results = arguments[1];
            };
          })(),
          lineno: 74
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        if (err) {
          return console.log(err);
        }
        results = _.each(results, function(r) {
          var _ref;
          return _ref = truncate(r.content, word), r.content = _ref[0], r.count = _ref[1], _ref;
        });
        return res.send(_.reject(results, function(r) {
          return r.content === '';
        }));
      };
    })(this));
  });

  app.use(express["static"](path.join(__dirname, 'app')));

  port = process.env.PORT || 4000;

  app.listen(port, function() {
    return console.log("Listening on " + port);
  });

}).call(this);
