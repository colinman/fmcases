// Generated by IcedCoffeeScript 1.8.0-a
(function() {
  var contentItem, dataItem, expandItem, menuItem, ngHammer, services, underscore,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.iced = {
    Deferrals: (function() {
      function _Class(_arg) {
        this.continuation = _arg;
        this.count = 1;
        this.ret = null;
      }

      _Class.prototype._fulfill = function() {
        if (!--this.count) {
          return this.continuation(this.ret);
        }
      };

      _Class.prototype.defer = function(defer_params) {
        ++this.count;
        return (function(_this) {
          return function() {
            var inner_params, _ref;
            inner_params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            if (defer_params != null) {
              if ((_ref = defer_params.assign_fn) != null) {
                _ref.apply(null, inner_params);
              }
            }
            return _this._fulfill();
          };
        })(this);
      };

      return _Class;

    })(),
    findDeferral: function() {
      return null;
    },
    trampoline: function(_fn) {
      return _fn();
    }
  };
  window.__iced_k = window.__iced_k_noop = function() {};

  underscore = angular.module('underscore', []);

  underscore.factory('_', function() {
    return window._;
  });

  ngHammer = angular.module('ngHammer', []);

  ngHammer.directive('ngTap', [
    '$parse', function($parse) {
      return {
        compile: function($element, attr) {
          var fn;
          fn = $parse(attr['ngTap']);
          return function(scope, element, attr) {
            return Hammer(element[0]).on('tap', function(event) {
              return scope.$apply(function() {
                return fn(scope, {
                  $event: event
                });
              });
            });
          };
        }
      };
    }
  ]);

  ngHammer.directive('ngPress', [
    '$parse', function($parse) {
      return {
        compile: function($element, attr) {
          var fn;
          fn = $parse(attr['ngPress']);
          return function(scope, element, attr) {
            return Hammer(element[0]).on('press', function(event) {
              return scope.$apply(function() {
                return fn(scope, {
                  $event: event
                });
              });
            });
          };
        }
      };
    }
  ]);

  services = angular.module('services', ['ngStorage', 'underscore']);

  services.value('pageTypes', {
    'nav': 'views/navigation.html',
    'content': 'views/content.html',
    'favorites': 'views/favorites.html',
    'recents': 'views/recents.html'
  });

  dataItem = (function() {
    function dataItem(id, title) {
      this.id = id;
      this.title = title;
    }

    return dataItem;

  })();

  expandItem = (function(_super) {
    __extends(expandItem, _super);

    expandItem.prototype.pageType = function() {
      return 'expand';
    };

    function expandItem(id, title, expandableContent) {
      this.id = id;
      this.title = title;
      this.expandableContent = expandableContent;
    }

    expandItem.prototype.showExpandable = false;

    return expandItem;

  })(dataItem);

  contentItem = (function(_super) {
    __extends(contentItem, _super);

    function contentItem() {
      return contentItem.__super__.constructor.apply(this, arguments);
    }

    contentItem.prototype.pageType = function() {
      return 'content';
    };

    contentItem.prototype.loadData = function(cb, $http, $sce) {
      var data, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      if (this.content) {
        return cb();
      }
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/opt/fmcases/app/js/services.coffee",
            funcname: "contentItem.loadData"
          });
          $http.get("/item/" + _this.id).success(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return data = arguments[0];
              };
            })(),
            lineno: 46
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          _this.content = $sce.trustAsHtml(data.content);
          return cb();
        };
      })(this));
    };

    return contentItem;

  })(dataItem);

  menuItem = (function(_super) {
    __extends(menuItem, _super);

    function menuItem() {
      return menuItem.__super__.constructor.apply(this, arguments);
    }

    menuItem.prototype.pageType = function() {
      return 'nav';
    };

    menuItem.prototype.loadData = function(cb, $http) {
      var data, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      if (this.items) {
        return cb();
      }
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/opt/fmcases/app/js/services.coffee",
            funcname: "menuItem.loadData"
          });
          $http.get("/item/" + _this.id).success(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return data = arguments[0];
              };
            })(),
            lineno: 54
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          _this.items = _.map(data.items, function(elem) {
            if (elem.pageType === 'expand') {
              return new expandItem(elem.id, elem.title, elem.expandableContent);
            } else if (elem.pageType === 'content') {
              return new contentItem(elem.id, elem.title);
            } else if (elem.pageType === 'nav') {
              return new menuItem(elem.id, elem.title);
            }
          });
          return cb();
        };
      })(this));
    };

    return menuItem;

  })(dataItem);

  services.factory('data', [
    '$http', '$sce', function($http, $sce) {
      var data;
      return new (data = (function() {
        function data() {}

        data.prototype.rootDataItem = function() {
          return new menuItem(1, "Home");
        };

        return data;

      })());
    }
  ]);

  services.factory('recents', [
    '$localStorage', 'data', function($localStorage, data) {
      var recents;
      return new (recents = (function() {
        function recents() {
          if (!$localStorage.recents) {
            $localStorage.recents = [];
          }
        }

        recents.prototype.add = function(item) {
          if (item.id === data.rootDataItem().id) {
            return;
          }
          $localStorage.recents = _.reject($localStorage.recents, function(i) {
            return i.id === item.id;
          });
          return $localStorage.recents.push(item);
        };

        recents.prototype.getRecents = function() {
          return $localStorage.recents;
        };

        recents.prototype.clear = function() {
          return $localStorage = null;
        };

        return recents;

      })());
    }
  ]);

  services.factory('utilFunctions', [
    'pageTypes', function(pageTypes) {
      var utilFunctions;
      return new (utilFunctions = (function() {
        function utilFunctions() {}

        utilFunctions.prototype.addMenuFuncs = function($scope) {
          return $scope.pushRecents = function() {
            if (navi.getCurrentPage().options.pageType === 'recents') {
              return;
            }
            return navi.pushPage(pageTypes['recents'], {
              pageType: 'recents'
            });
          };
        };

        return utilFunctions;

      })());
    }
  ]);

}).call(this);
